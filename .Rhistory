levels = c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"))
, monat = factor(format(as.Date(as.POSIXct(activities.raw$start_date_local, tz = "Europe/Berlin"),
tz = "Europe/Berlin"), "%b"),
levels = format(seq(as.Date("2015-01-01"), as.Date("2015-12-31"),
"month"), "%b"))
, jahr = factor(format(as.Date(as.POSIXct(activities.raw$start_date_local, tz = "Europe/Berlin"),
tz = "Europe/Berlin"), "%Y"))
, woche = factor(format(as.Date(as.POSIXct(activities.raw$start_date_local, tz = "Europe/Berlin"),
tz = "Europe/Berlin"), "%W")) ## ISO-Norm Wochen
, kw = factor(format(as.Date(as.POSIXct(activities.raw$start_date_local, tz = "Europe/Berlin"),
tz = "Europe/Berlin"), "%W%y"),
levels = format(seq(min(as.Date(as.POSIXct(activities.raw$start_date_local,
tz = "Europe/Berlin"), tz = "Europe/Berlin"), na.rm = T),
max(as.Date(as.POSIXct(activities.raw$start_date_local,
tz = "Europe/Berlin"), tz = "Europe/Berlin"),
na.rm = T), "week"), "%W%y"))
, doy = format(as.Date(as.POSIXct(activities.raw$start_date_local, tz = "Europe/Berlin"),
tz = "Europe/Berlin"), "%j")
, distance_cat = cut(activities.raw$distance, breaks = c(0, 7000, 10000, 12000, 15000, Inf),
labels = c("< 7", "7-10", "10-12", "12-15", "> 15"))
)
# Add number of photos to activities
n.photos <- photos %>%
group_by(activity_id) %>%
summarise(n.photos = n_distinct(url.str))
activities <- activities %>%
left_join(n.photos, by = c("id" = "activity_id")) %>%
replace_na(list(n.photos = 0))
# Add gear Names to activities
activities <- gear %>%
select(-distance) %>%
rename(gear_brand_name = brand_name, shoe = name, gear_id = id) %>%
right_join(activities, by = c("gear_id" = "gear_id"))
# A merged dataset for kudoes and activities
d <- merge(activities, kudoers, by = "id")
myorange = "#f5a105"
# All days of the year:
all.days <- seq(as.Date("2020-01-01"), as.Date("2020-12-31"), "day")
all.days <- data.frame(
datum = seq(as.Date("2020-01-01"), as.Date("2020-12-31"), "day"),
monat = format(seq(as.Date("2020-01-01"), as.Date("2020-12-31"), "day"), "%m")
)
View(all.days)
all.days <- data.frame(
datum = seq(as.Date("2020-01-01"), as.Date("2020-12-31"), "day"),
monat = format(seq(as.Date("2020-01-01"), as.Date("2020-12-31"), "day"), "%B")
)
View(all.days)
run.days <- activities %>%
select(datum, distance) %>%
right_join(all.days, by = c("datum" = "datum"))
View(run.days)
run.days <- activities %>%
select(datum, distance) %>%
right_join(all.days, by = c("datum" = "datum")) %>%
arrange(datum)
View(run.days)
run.days <- activities %>%
select(datum, distance) %>%
right_join(all.days, by = c("datum" = "datum")) %>%
replace_na(distance, 0) %>%
mutate(run = case_when(distance == 0 ~ 0, distance > 0 ~ 1)) %>%
arrange(datum)
run.days <- activities %>%
select(datum, distance) %>%
right_join(all.days, by = c("datum" = "datum")) %>%
replace_na(distance, 0)
run.days <- activities %>%
select(datum, distance) %>%
right_join(all.days, by = c("datum" = "datum")) %>%
replace_na(list(distance=0))
View(run.days)
run.days <- activities %>%
select(datum, distance) %>%
right_join(all.days, by = c("datum" = "datum")) %>%
replace_na(list(distance=0)) %>%
mutate(run = case_when(distance == 0 ~ 0, distance > 0 ~ 1)) %>%
arrange(datum)
View(run.days)
ds <- seq(as.Date("2020-01-01"), as.Date("2020-12-31"), "day")
all.days <- data.frame(
datum = ds,
monat = format(ds, "%B"),
tag = factor(format(ds, "%a"), levels = c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")),
woche = factor(format(ds, "%W"))
)
View(all.days)
run.days <- activities %>%
select(datum, distance) %>%
right_join(all.days, by = c("datum" = "datum")) %>%
replace_na(list(distance=0)) %>%
mutate(run = case_when(distance == 0 ~ 0, distance > 0 ~ 1)) %>%
arrange(datum)
View(run.days)
ggplot(run.days, aes(monat, tag, fill = distance/1000)) +
geom_tile()
ggplot(run.days, aes(tag, monat, fill = distance/1000)) +
geom_tile()
knitr::opts_chunk$set(echo = FALSE)
# Libraries
library(rjson)
library(RPostgres)
library(RPostgreSQL)
library(dplyr)
library(tidyr)
library(ggplot2)
library(emojifont)
library(RColorBrewer)
library(ggimage)
library(treemapify)
library(ggridges)
library(viridis)
library(hrbrthemes)
# Connect to database
db.cred <- fromJSON(file = "c:\\Users\\dubra_dni0\\repos\\stravakudos\\.secret\\postgres_credentials.json")
con <- dbConnect(RPostgres::Postgres(),
dbname = db.cred$database,
host = db.cred$host,
port = 5432,
user = db.cred$user,
password = db.cred$password
)
# Get all available data
activities.raw <- dbGetQuery(con, "SELECT * FROM public.activities;")
kudoers <- dbGetQuery(con, "SELECT * FROM public.kudoers;")
gear <- dbGetQuery(con, "SELECT * FROM public.gear;")
photos <- dbGetQuery(con, "SELECT * FROM public.photos;")
# One wrong run needs to be corrected
activities.raw[activities.raw$id == 3487007166, "moving_time"] <- "0:50:53"
activities.raw[activities.raw$id == 3487007166, "average_speed"] <- 8556/3053
# Some data management
kudoers$fullname <- paste(kudoers$firstname, kudoers$lastname)
photos$url.str <- photos$url
activities <- data.frame(
id = activities.raw$id
, name = activities.raw$name
, distance = activities.raw$distance
, moving_time = activities.raw$moving_time
, moving_time_sec = as.numeric(substr(activities.raw$moving_time, 1, 1)) * 60 * 60 +
as.numeric(substr(activities.raw$moving_time, 3, 4)) * 60 +
as.numeric(substr(activities.raw$moving_time, 6, 7))
, average_pace = 16.66666667/activities.raw$average_speed
, average_pace_str = paste0(floor(16.66666667/activities.raw$average_speed), ":",
formatC(round((16.66666667/activities.raw$average_speed -
floor(16.66666667/activities.raw$average_speed)) * 60, 0),
width = 2, flag = "0"))
, average_speed = activities.raw$average_speed
, max_speed = activities.raw$max_speed
, gear_id = activities.raw$gear_id
, suffer_score = activities.raw$suffer_score
, start_date_local = as.POSIXct(activities.raw$start_date_local, tz = "Europe/Berlin")
, kudos_count = activities.raw$kudos_count
, datum = as.Date(as.POSIXct(activities.raw$start_date_local, tz = "Europe/Berlin"), tz = "Europe/Berlin")
, tag = factor(format(as.Date(as.POSIXct(activities.raw$start_date_local, tz = "Europe/Berlin")
, tz = "Europe/Berlin"), "%a"),
levels = c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"))
, monat = factor(format(as.Date(as.POSIXct(activities.raw$start_date_local, tz = "Europe/Berlin"),
tz = "Europe/Berlin"), "%b"),
levels = format(seq(as.Date("2020-01-01"), as.Date("2020-12-31"),
"month"), "%b"))
, jahr = factor(format(as.Date(as.POSIXct(activities.raw$start_date_local, tz = "Europe/Berlin"),
tz = "Europe/Berlin"), "%Y"))
, woche = factor(format(as.Date(as.POSIXct(activities.raw$start_date_local, tz = "Europe/Berlin"),
tz = "Europe/Berlin"), "%W")) ## ISO-Norm Wochen
, kw = factor(format(as.Date(as.POSIXct(activities.raw$start_date_local, tz = "Europe/Berlin"),
tz = "Europe/Berlin"), "%W%y"),
levels = format(seq(min(as.Date(as.POSIXct(activities.raw$start_date_local,
tz = "Europe/Berlin"), tz = "Europe/Berlin"), na.rm = T),
max(as.Date(as.POSIXct(activities.raw$start_date_local,
tz = "Europe/Berlin"), tz = "Europe/Berlin"),
na.rm = T), "week"), "%W%y"))
, doy = format(as.Date(as.POSIXct(activities.raw$start_date_local, tz = "Europe/Berlin"),
tz = "Europe/Berlin"), "%j")
, distance_cat = cut(activities.raw$distance, breaks = c(0, 7000, 10000, 12000, 15000, Inf),
labels = c("< 7", "7-10", "10-12", "12-15", "> 15"))
)
# Add number of photos to activities
n.photos <- photos %>%
group_by(activity_id) %>%
summarise(n.photos = n_distinct(url.str))
activities <- activities %>%
left_join(n.photos, by = c("id" = "activity_id")) %>%
replace_na(list(n.photos = 0))
# Add gear Names to activities
activities <- gear %>%
select(-distance) %>%
rename(gear_brand_name = brand_name, shoe = name, gear_id = id) %>%
right_join(activities, by = c("gear_id" = "gear_id"))
# A merged dataset for kudoes and activities
d <- merge(activities, kudoers, by = "id")
myorange = "#f5a105"
all.days <- data.frame(
datum = ds,
monat = factor(format(ds, "%B"), levels = format(seq(as.Date("2020-01-01"), as.Date("2020-12-31"), "month"), "%B")),
tag = factor(format(ds, "%a"), levels = c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")),
woche = factor(format(ds, "%W"))
)
run.days <- activities %>%
select(datum, distance) %>%
right_join(all.days, by = c("datum" = "datum")) %>%
replace_na(list(distance=0)) %>%
mutate(run = case_when(distance == 0 ~ 0, distance > 0 ~ 1)) %>%
arrange(datum)
ggplot(run.days, aes(tag, monat, fill = distance/1000)) +
geom_tile()
ggplot(run.days, aes(tag, datum, fill = distance/1000)) +
geom_tile() +
facet_grid(monat ~ woche)
all.days <- data.frame(
datum = ds,
monat = factor(format(ds, "%B"), levels = format(seq(as.Date("2020-01-01"), as.Date("2020-12-31"), "month"), "%B")),
tag = factor(format(ds, "%a"), levels = c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")),
woche = factor(format(ds, "%W")),
dom = factor(format(ds, "%e"))
)
View(all.days)
run.days <- activities %>%
select(datum, distance) %>%
right_join(all.days, by = c("datum" = "datum")) %>%
replace_na(list(distance=0)) %>%
mutate(run = case_when(distance == 0 ~ 0, distance > 0 ~ 1)) %>%
arrange(datum)
ggplot(run.days, aes(dom, tag, fill = run)) +
geom_tile() +
facet_grid(monat ~ woche)
ggplot(run.days, aes(dom, monat, fill = distance)) +
geom_tile()
ggplot(run.days, aes(dom, monat, fill = factor(run))) +
geom_tile()
scale_fill_viridis()
ggplot(run.days, aes(dom, monat, fill = factor(run))) +
geom_tile() +
theme_minimal() +
guides(fill=FALSE) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "RUNRUNRUN", y = "", x = "")
ggplot(run.days, aes(dom, monat, fill = factor(run))) +
geom_tile() +
theme_void() +
guides(fill=FALSE) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "RUNRUNRUN", y = "", x = "")
ggplot(run.days, aes(dom, monat, fill = factor(run))) +
geom_tile() +
theme_nothing() +
guides(fill=FALSE) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "RUNRUNRUN", y = "", x = "")
ggplot(run.days, aes(dom, monat, fill = factor(run))) +
geom_tile() +
theme_bw() +
guides(fill=FALSE) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "RUNRUNRUN", y = "", x = "")
ggplot(run.days, aes(dom, monat, fill = factor(run))) +
geom_tile() +
theme_light() +
guides(fill=FALSE) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "RUNRUNRUN", y = "", x = "")
ggplot(run.days, aes(dom, monat, fill = factor(run))) +
geom_tile() +
theme_minimal() +
guides(fill=FALSE) +
scale_fill_viridis(discrete = TRUE) +
labs(title = "RUNRUNRUN", y = "", x = "")
ggplot(run.days, aes(dom, monat, fill = factor(run))) +
geom_tile() +
theme_minimal() +
guides(fill=FALSE) +
scale_fill_manual(values = c("white", myorange)) +
#  scale_fill_viridis(discrete = TRUE) +
labs(title = "RUNRUNRUN", y = "", x = "")
ggplot(run.days, aes(dom, monat, fill = factor(run))) +
geom_tile() +
theme_minimal() +
guides(fill=FALSE) +
scale_fill_manual(values = c("black", myorange)) +
#  scale_fill_viridis(discrete = TRUE) +
labs(title = "RUNRUNRUN", y = "", x = "")
ggplot(run.days, aes(dom, monat, fill = factor(run))) +
geom_tile() +
theme_minimal() +
theme(panel.grid = element_line(colour = "black", size = 1)) +
guides(fill=FALSE) +
scale_fill_manual(values = c("black", myorange)) +
#  scale_fill_viridis(discrete = TRUE) +
labs(title = "RUNRUNRUN", y = "", x = "")
ggplot(run.days, aes(dom, monat, fill = factor(run))) +
geom_tile() +
theme_minimal() +
theme(panel.grid = element_blank()) +
guides(fill=FALSE) +
scale_fill_manual(values = c("black", myorange)) +
labs(title = "RUNRUNRUN", y = "", x = "")
ggplot(run.days, aes(dom, monat, fill = distance)) +
geom_tile() +
theme_minimal() +
theme(panel.grid = element_blank()) +
guides(fill=FALSE) +
scale_fill_gradient(low = "black", high = myorange) +
labs(title = "RUNRUNRUN", y = "", x = "")
data <- run.days %>%
group_by(monat, woche) %>%
summarise(individual = sum(distance/1000))
View(data)
data <- run.days %>%
group_by(monat, woche) %>%
summarise(value = sum(distance/1000)) %>%
rename(group = monat, individual = woche)
View(data)
empty_bar <- 3
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
View(data)
data <- run.days %>%
group_by(monat, woche) %>%
summarise(value = sum(distance/1000)) %>%
rename(group = monat, individual = woche)
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 1
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
View(data)
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
data <- run.days %>%
group_by(monat, woche) %>%
summarise(value = sum(distance/1000)) %>%
rename(group = monat, id = woche)
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 1
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
View(data)
data <- run.days %>%
group_by(monat, woche) %>%
summarise(value = sum(distance/1000)) %>%
rename(group = monat, id = woche) %>%
mutate(individual = paste("KW", formatC(as.numeric(id), width = 2, flag = "0")))
View(data)
empty_bar <- 1
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
View(data)
top.ten <- d %>%
group_by(fullname) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
ungroup() %>%
mutate(Name = reorder(fullname, n)) %>%
head(10)
img.src <- c(
"https://dgalywyr863hv.cloudfront.net/pictures/athletes/33448821/14362597/1/medium.jpg",
"https://graph.facebook.com/10157239268009098/picture?height=256&width=256",
"https://dgalywyr863hv.cloudfront.net/pictures/athletes/5232942/2746916/4/medium.jpg",
"https://dgalywyr863hv.cloudfront.net/pictures/athletes/16295153/5009802/12/medium.jpg",
"https://dgalywyr863hv.cloudfront.net/pictures/athletes/37700411/11087097/3/medium.jpg",
"https://dgalywyr863hv.cloudfront.net/pictures/athletes/10826705/3273402/8/medium.jpg",
"https://dgalywyr863hv.cloudfront.net/pictures/athletes/29625014/8890577/3/medium.jpg",
"https://dgalywyr863hv.cloudfront.net/pictures/athletes/1257681/831497/2/medium.jpg",
"https://dgalywyr863hv.cloudfront.net/pictures/athletes/51773560/13797523/1/medium.jpg",
"https://dgalywyr863hv.cloudfront.net/pictures/athletes/12337737/3695515/7/medium.jpg"
)
kudoer.img <- data.frame(Name = top.ten$fullname, img.src = img.src)
top.ten <- merge(top.ten, kudoer.img)
View(top.ten)
